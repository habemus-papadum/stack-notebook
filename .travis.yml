sudo: false
cache:
  directories:
  - $HOME/.stack
  - $HOME/zeromq4-x

language: cpp
matrix:
  include:
    - os: linux
    - os: osx
before_install:
  - echo "Installing stack..."
  - |
    if [ `uname` = "Linux" ]; then
      mkdir -p $HOME/bin
      export PATH=$HOME/.local/bin:$PATH
      mkdir -p ~/.local/bin
      curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
    elif [ `uname` = "Darwin" ]; then
      brew update
      brew install -v haskell-stack
    fi
  - echo "Zeromq..."
  - |
    if [ `uname` = "Linux" ]; then
      if [ ! -d "$HOME/zeromq4-x/lib" ]; then
        git clone http://www.github.com/zeromq/zeromq4-x.git
        cd zeromq4-x
        ./autogen.sh && ./configure --prefix=$HOME/zeromq4-x && make -j4 && make install
        cd ..
      fi
      export PKG_CONFIG_PATH=$HOME/zeromq4-x/lib/pkgconfig
      export LD_LIBRARY_PATH=$HOME/zeromq4-x/lib
     elif [ `uname` = "Darwin" ]; then
      brew install -v zeromq
    fi
  - pkg-config --modversion libzmq
    # Bootstrap stack cache to work around issues when travis times out a long build.
    # On an initial build without cache, IHaskell might take too long to build and is killed by travis.
    # But when travis does this, it does not save the cache generated up to that point, which means
    # the same thing will happen if the build is rerun.  So instead we build a few packages, record a sentinel,
    # and then fail.  While this requires a manual rerun each time a new lts is cut, for now this seems like the only
    # way forward.  (Note: When this happens, the existing cache should be dropped so that the cache does not accumulate old
    # lts's)
  - |
    stack setup
    travis_cache_sentinal_1="$(stack path --snapshot-install-root)/travis_cache_sentinal_1"
    if [ ! -f "$travis_cache_sentinal_1" ]; then
      echo "Bootstrapping travis cache..."
      stack install aeson diagrams
      touch ${travis_cache_sentinal_1}
      echo "Failing build so that cache is committed before travis nukes us for taking took long.
      ech  "This was done on purpose. Retrigger the build to continue."
      echo "Refer to comment in .travis.yml for more context."
      false
    fi

script:
  - export PATH=$PWD:$PATH
  - echo "echo Installation successful" | stack notebook
  - kernel=$(echo 'echo $STACK_NOTEBOOK_KERNEL' | stack notebook) && echo ${kernel}
  - echo "jupyter nbconvert --ExecutePreprocessor.kernel_name=${kernel} --to notebook --execute --stdout test/DisplayTest.ipynb" | stack notebook > test.ipynb
  - diff test.ipynb test/DisplayTest.ipynb
