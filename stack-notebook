#!/usr/bin/env bash
set -e

## NOTE:  This script is being put into "maintenance mode."  As it stands, the complexity is just about at the limits
## of what I can tolerate for a single bash script.  I don't plan to add more features, but will likely make tweaks to
## improve robustness. -- nehal, 10/25/17

stack=${STACK_EXE:-stack}
## bashism: check if stack exists
if ! hash ${stack} 2>/dev/null; then
  less <<- EOM
There's a problem...

'stack' does not appear to be installed on your system!

It turns out that 'stack notebook' requires 'stack' to run :-)

Please install it by following the instructions at:
https://docs.haskellstack.org/en/stable/install_and_upgrade/

Or on macOs with homebrew:
brew install haskell-stack

NOTE:
The first time you use stack, it takes a few minutes to install ghc,
and then _many_ minutes to build IHaskell (~40min)  Subsequent runs of
stack notebook are likely to be much faster... (hopefully)
EOM
  exit 1
fi


## bashism: check if stack exists
if ! hash pkg-config 2>/dev/null; then
  less <<- EOM
There's a problem...

The pkg-config' tool does not appear to be available!

'pkg-config' is a low level tool used for managing software libraries.

In many OS's/Linux distributions, 'pkg-config' is usually bundled with many other low level tools via
a "basic development tools" mega-package.  While this script only directly relies on pkg-config,
the GHC Haskell compiler will rely on a much larger number of these typical tools.  While getting these
tools is pretty simple (hopefully, a few minutes of googling around), it involves making some decisions that
I do not feel comfortable making for you.  Please install 'pkg-config' (and the other basic tools needed by ghc)
and try running 'stack notebook' again.


On macOs with homebrew, this might be sufficient:
# first install "xcode commandline tools" (google for this, or just try running 'gcc' in the terminal,
# and you will be prompted for what to do)

#then
brew install pkg-config

EOM
  exit 1
fi

## TODO add check for curl....

## Installs ghc if need
project_root=$(${stack} --install-ghc path --project-root)
>&2 echo "Running stack notebook for ${project_root}..."
project=$(basename ${project_root})

#todo: get snapshot via `${stack} config get` when available
snapshot=$(basename "$(dirname "$(stack path --snapshot-install-root)")")
>&2 echo "Using stack snapshot ${snapshot}..."

notebook_dir=${HOME}/.stack-notebook
mkdir -p ${notebook_dir}
##conda
conda_dir=${notebook_dir}/conda
conda=${conda_dir}/bin/conda
if [ ! -d "${conda_dir}" ]; then
(
  cd ${notebook_dir}
  >&2 echo "Installing miniconda..."
  if [ `uname` = "Linux" ]; then
     conda_os=Linux
  elif [ `uname` = "Darwin" ]; then
     conda_os=MacOSX
  elif [ `uname` = "Darwin" ]; then
     >&2 echo "stack-notebook does not support the $(uname) platform" && exit 1
  fi
  curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-${conda_os}-x86_64.sh
  sh Miniconda3-latest-${conda_os}-x86_64.sh -b -f -p ${conda_dir}
)
fi

## jupyter
jupyter=${notebook_dir}/conda/bin/jupyter
if [ ! -f "${jupyter}" ]; then
(
  ${conda} install --yes jupyter_core=4.3 notebook=5.0 nbconvert=5.2 ipykernel=4.6 ipywidgets=6.0 widgetsnbextension=2.0
)
fi



## IHaskell
nb_snapshot_dir=${notebook_dir}/snapshots/${snapshot}
mkdir -p ${nb_snapshot_dir}

ihaskell_dir=${nb_snapshot_dir}/IHaskell
if [ ! -z "${IHASKELL_DEV_MODE}" ]; then
    >&2 echo "IHaskell Dev mode..."
    ihaskell_dir="${ihaskell_dir}${IHASKELL_DEV_MODE}"
    if [ ! -L ${ihaskell_dir} ]; then
        >&2 echo "${ihaskell_dir} should be a symlink.  Exiting..." && exit 1
    fi
elif [ ! -d "${ihaskell_dir}" ]; then

    ## check if zeromq exists
    >&2 echo "Ensuring zeromq 4.0 has been installed..."
    set +e
    pkg-config --atleast-version=4.0.0 libzmq && pkg-config --max-version=5.0.0 libzmq
    zmq_ok=$?
    set -e
    if [ ${zmq_ok} -ne 0 ]; then
        less <<- EOM
There's a problem...

The library zeromq v4.x does not appear to be installed on your system.  I'm very sorry, but this
the one slightly complicated issue I'm not sure how to solve.

Zeromq4 is widely available, and installation can often be as easy as:

## macOS
brew install zeromq

## On many systems, this will work:
git clone http://www.github.com/zeromq/zeromq4-x.git
cd zeromq4-x
./autogen.sh && ./configure && make -j4 && make check && sudo make install && sudo ldconfig

Once zeromq has been installed, just rerun 'stack notebook' and it will continue where it
left off.

Unfortunately, automatically installing it for you in a way that doesn't
cause you problems later on if you decide to uninstall 'stack notebook' is not easy,
and involves making risk trade-offs that I feel uncomfortable making for you.

Note:
On Linux, if you are using a package manager to get zeromq, make sure it provides you with zeromq 4.x
(as opposed to 2.x or 3.x), and that you get the dev package as well as the runtime package.
If you must stay at a lower version, I'm afraid there may not be a simple solution....

Ok, I hope that helps.  I'm going to exit now. Sorry again, and good luck!

EOM
        exit 1
    fi # zmq test

    # grab fresh IHaskell per snapshot to simplify bisecting to find a feasible build plan
    (
        cd ${nb_snapshot_dir}
        git clone https://github.com/habemus-papadum/IHaskell.git
        commitish="stack-notebook/${snapshot}"  ## is it really a commitish?
        cd IHaskell

        ## first check if there is branch for the applicable snapshot
        ## (This is where support for old lts's go when it is no longer feasible manage
        ## patches for them in the main branch)
        if git rev-parse --verify remotes/origin/${commitish}; then
            >&2 echo "Checking out ${commitish}"
            git checkout -b ${commitish} remotes/origin/${commitish}

        ## Then see if there is a applicable stack.yaml in the main branch
        elif [ -f "stack-${snapshot}.yaml" ]; then
            >&2 echo "Found stack-${snapshot}.yaml..."
            rm stack.yaml
            ln -s stack-${snapshot}.yaml stack.yaml
        else
            >&2 echo "There is no tag/branch for ${commitish} in the IHaskell repo"
            >&2 echo "We will try to use the default 'stack.yaml'.  Cross your fingers...."
            sleep 3s
        fi
    )
fi

ihaskell_install_dir="$(cd ${ihaskell_dir}; stack path --resolver=${snapshot} --local-install-root)/bin"
ihaskell=${ihaskell_install_dir}/ihaskell
if [ ! -f "${ihaskell}" ]; then
(
  >&2 echo "Building IHaskell..."
  mkdir -p ${ihaskell_install_dir}
  cd ${ihaskell_dir}
  ${stack} build --resolver=${snapshot} --fast  ## todo: consider not fast
)
fi

# kernel spec
kernels_dir=${conda_dir}/share/jupyter/kernels
kernel="${project}-${snapshot}${IHASKELL_DEV_MODE}"
if [ ! -z "${STACK_NOTEBOOK_KERNEL_NAME}" ]; then
  kernel=${STACK_NOTEBOOK_KERNEL_NAME}
fi


if [ ! -z "${STACK_NOTEBOOK_KERNEL_DEBUG}" ]; then
  kernel="${kernel}-debug"
  debug_flag="\"--debug\","
fi

kernel_dir=${kernels_dir}/${kernel}
ghc_bin_dir=$(${stack} path --compiler-bin)

if [ ! -d "${kernel_dir}" ]; then
    ghc_dir=$(dirname ${ghc_bin_dir})
    ghc=$(basename ${ghc_dir})
    ghc_lib=${ghc_dir}/lib/${ghc}
    (
      >&2 echo "Creating jupyter kernel for ${kernel}..."

      #prepare pkg_db_path
      # TODO: Consider not using a fixed env, but relying on the kernel being launched
      # TODO: with proper env variables set.  Requires conda kernel isolation to work
      #helper
      strindex() {
        x="${1%%$2*}"
        [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
      }
      interpose() {
        path=$1
        item=$2
        end_of_first_path_element=$(strindex ${path} ":")

        echo "${path:0:$end_of_first_path_element}:${item}${path:$end_of_first_path_element}"
      }

      project_pkg_db_path=$(${stack} exec bash -- -c "echo \$GHC_PACKAGE_PATH")
      sandboxes=$(${stack} exec bash -- -c "echo \$HASKELL_PACKAGE_SANDBOXES")
      ihaskell_pkg_db=$(cd ${ihaskell_dir}; ${stack} path --local-pkg-db)
      interposed_pkg_db_path=$(interpose ${project_pkg_db_path} ${ihaskell_pkg_db})
      interposed_pkg_sandboxes=$(interpose ${sandboxes} ${ihaskell_pkg_db})

      mkdir -p ${kernel_dir}
      cat << EOM > ${kernel_dir}/kernel.json
          {
              "display_name": "${kernel}",
              "argv": [
                "${ihaskell}",
                "kernel",
                ${debug_flag}
                "{connection_file}",
                "--ghclib",
                "${ghc_lib}",
                "+RTS",
                "-M3g",
                "-N2",
                "-RTS"
              ],
              "env": {
                "GHC_PACKAGE_PATH": "${interposed_pkg_db_path}",
                "HASKELL_PACKAGE_SANDBOXES": "${interposed_pkg_sandboxes}"
              },
              "language": "Haskell"
          }
EOM

      ##copy files
      cp ${ihaskell_dir}/html/* ${kernel_dir}
      ## collision helper
      echo "${project_root}" > ${kernel_dir}/collision_helper
    )
fi
kernel_project_root=$(cat ${kernel_dir}/collision_helper)
if [ "${kernel_project_root}" != "${project_root}" ]; then
        less <<- EOM
There's a problem...

The notebook kernel that 'stack notebook' wants to create for project
${project_root}, using the normal default values, conflicts with
the kernel created for ${kernel_project_root}.

Unfortunately, there is no simple way for me to fix this without your help.

You can rerun stack notebook with an alternate name:
> STACK_NOTEBOOK_KERNEL_NAME=<alternate name> stack notebook

You will need to set that env variable each time you run stack notebook for this
project.  However, should you forget, stack notebook will detect the mistake and ask
you to help it resolve the situation by showing you this message again.

Note:  You can also remove the existing kernel if you like. It is located at
${kernel_dir}.

Ok, I hope that helps.  I'm going to exit now. Sorry again, and good luck!

EOM
exit 1

fi

export PATH=${conda_dir}/bin:${ihaskell_install_dir}:${ghc_bin_dir}:${PATH}
export STACK_NOTEBOOK_KERNEL=${kernel}

## Runtime
if [[ $# -eq 0 ]]; then
   set -- jupyter notebook
   echo "$@"
fi
exec "$@"
