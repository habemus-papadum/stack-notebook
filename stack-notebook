#!/usr/bin/env bash
set -e

## bashism: check if stack exists
if ! hash stack 2>/dev/null; then
  cat <<- EOM
Error:  stack does not appear to be installed on your system!

Please install it by following the instructions at:
https://docs.haskellstack.org/en/stable/install_and_upgrade/

Or on macOs with homebrew:
brew install haskell-stack

NOTE:
The first time you use stack, it takes a few minutes to install ghc,
and then _many_ minutes to build IHaskell.  Subsequent runs of
stack-notebook are likely to be much faster... (hopefully)
EOM
  exit 1
fi

report() {
    if [ -t 0 ]; then echo $1; fi
}

## Installs ghc if need
project_root=$(stack --install-ghc path --project-root)
report "Running stack notebook for ${project_root}..."
project=$(basename ${project_root})

#todo: get snapshot via `stack config get` when available
snapshot=$(basename "$(dirname "$(stack path --snapshot-install-root)")")
report "Using stack snapshot ${snapshot}..."

notebook_dir=${HOME}/.stack-notebook

##conda
conda_dir=${notebook_dir}/conda
conda=${conda_dir}/bin/conda
if [ ! -d "${conda_dir}" ]; then
(
  cd ${nb_snapshot_dir}
  echo "Installing miniconda..."
  if [ `uname` = "Linux" ]; then
     conda_os=Linux
  elif [ `uname` = "Darwin" ]; then
     conda_os=MacOSX
  elif [ `uname` = "Darwin" ]; then
     echo "stack-notebook does not support the $(uname) platform" && exit 1
  fi
  curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-${conda_os}-x86_64.sh
  sh Miniconda3-latest-${conda_os}-x86_64.sh -b -f -p ${conda_dir}
)
fi

## jupyter
jupyter=${notebook_dir}/conda/bin/jupyter
if [ ! -f "${jupyter}" ]; then
(
  ${conda} install --yes jupyter_core notebook nbconvert ipykernel ipywidgets
)
fi



## IHaskell
nb_snapshot_dir=${notebook_dir}/snapshots/${snapshot}
mkdir -p ${nb_snapshot_dir}

ihaskell_dir=${nb_snapshot_dir}/IHaskell
if [ ! -d "${ihaskell_dir}" ]; then

    ## check if zeromq exists
    echo "Ensuring zeromq 4.0 has been installed..."
    set +e
    pkg-config --atleast-version=4.0.0 libzmq && pkg-config --max-version=5.0.0 libzmq
    zmq_ok=$?
    set -e
    if [ ${zmq_ok} -ne 0 ]; then
        less <<- EOM
There's a problem...

The library zeromq v4.x does not appear to be installed on your system.  I'm very sorry, but this
the one issue I'm not sure how to solve.

Zeromq4 is widely available, and installation can often be as easy as:

## macOS
brew install zeromq

## On many systems, this will work:
git clone http://www.github.com/zeromq/zeromq4-x.git
cd zeromq4-x
./autogen.sh && ./configure && make -j4 && make check && sudo make install && sudo ldconfig

Once zeromq has been installed, just rerun 'stack notebook' and it will continue where it
left off.

Unfortunately, automatically installing it for you in a way that doesn't
cause you problems later on if you decide to uninstall 'stack notebook' is not easy,
and involves making risk trade-offs that I feel uncomfortable making for you.

Note:
On Linux, if you are using a package manager to get zeromq, make sure it provides you with zeromq 4.x
(as opposed to 2.x or 3.x), and that you get the dev package as well as the runtime package.
If you must stay at a lower version, I'm afraid there may not be a simple solution....

Ok, I hope that helps.  I'm going to exit now. Sorry again, and good luck!

EOM
        exit 1
    fi # zmq test

    # grab fresh IHaskell per snapshot to simplify bisecting to find a feasible build plan
    (
        cd ${nb_snapshot_dir}
        git clone https://github.com/habemus-papadum/IHaskell.git
    )
fi

ihaskell=${nb_snapshot_dir}/bin/ihaskell
if [ ! -f "${ihaskell}" ]; then
(
  ## build
  cd ${nb_snapshot_dir}
  mkdir -p bin
  cd ${ihaskell_dir}
  stack install --resolver=${snapshot} --local-bin-path=${nb_snapshot_dir}/bin --fast
)
fi

# kernel spec
kernels_dir=${conda_dir}/share/jupyter/kernels
kernel=${project}-${snapshot}  ## todo: this could easily collide, for now it just overwrites
kernel_dir=${kernels_dir}/${kernel}

if [ ! -d "${kernel_dir}" ]; then
    ghc_dir=$(dirname $(stack path --compiler-bin))
    ghc=$(basename ${ghc_dir})
    ghc_lib=${ghc_dir}/lib/${ghc}
    (
      echo "Creating jupyter kernel for ${kernel}..."
      mkdir -p ${kernel_dir}
      cat << EOM > ${kernel_dir}/kernel.json
          {
              "display_name": "${kernel}",
              "argv": [
                "${ihaskell}",
                "kernel",
                "{connection_file}",
                "--ghclib",
                "${ghc_lib}",
                "+RTS",
                "-M3g",
                "-N2",
                "-RTS"
              ],
              "language": "Haskell"
          }
EOM

    ##copy files
      cp ${ihaskell_dir}/html/* ${kernel_dir}
    )
fi

#prepare pkg_db_path
#helper
strindex() {
  x="${1%%$2*}"
  [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}
project_pkg_db_path=$(stack exec bash -- -c "echo \$GHC_PACKAGE_PATH")
end_of_first_path_element=$(strindex ${project_pkg_db_path} ":")
ihaskell_pkg_db=$(cd ${ihaskell_dir}; stack path --local-pkg-db)
export interposed_path="${project_pkg_db_path:0:$end_of_first_path_element}:${ihaskell_pkg_db}${project_pkg_db_path:$end_of_first_path_element}"


if [ -t 0 ]; then
    cmd="${jupyter} notebook"
else
   cmd=$(</dev/stdin)
fi

## Runtime
export PATH=${conda_dir}/bin:${nb_snapshot_dir}/bin:${PATH}
export STACK_NOTEBOOK_KERNEL=${kernel}
stack exec bash << EOM
export GHC_PACKAGE_PATH=${interposed_path}
${cmd}
EOM