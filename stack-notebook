#!/usr/bin/env bash
set -e

## bashism: check if stack exists
if ! hash stack 2>/dev/null; then
cat <<- DELIM
Error:  stack does not appear to be installed on your system!

Please install it by following the instructions at:
https://docs.haskellstack.org/en/stable/install_and_upgrade/

Or on macOs with homebrew:
brew install haskell-stack

NOTE:
The first time you use stack, it takes a few minutes to install ghc,
and then _many_ minutes to build IHaskell.  Subsequent runs of
stack-notebook are likely to be much faster... (hopefully)
DELIM
exit 1
fi


project_root=$(stack path --project-root)
echo "Running stack notebook for ${project_root}..."
project=$(basename ${project_root})

#todo: get snapshot via `stack config get` when available
snapshot=$(basename "$(dirname "$(stack path --snapshot-install-root)")")
echo -e "Using stack snapshot ${snapshot}..."

notebook_dir=${HOME}/.stack-notebook

##conda
conda_dir=${notebook_dir}/conda
conda=${conda_dir}/bin/conda
if [ ! -d "${conda_dir}" ]; then
(
  cd ${nb_snapshot_dir}
  echo "Installing miniconda..."
  conda_os=MacOSX
  curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-${conda_os}-x86_64.sh
  sh Miniconda3-latest-${conda_os}-x86_64.sh -b -f -p ${conda_dir}
)
fi

## jupyter
jupyter=${notebook_dir}/conda/bin/jupyter
if [ ! -f "${jupyter}" ]; then
(
  ${conda} install --yes jupyter_core notebook-5.0.0 nbconvert ipykernel ipywidgets
)
fi

## IHaskell
nb_snapshot_dir=${notebook_dir}/snapshots/${snapshot}
mkdir -p ${nb_snapshot_dir}

ihaskell_dir=${nb_snapshot_dir}/IHaskell
if [ ! -d "${ihaskell_dir}" ]; then
(
    # grab fresh IHaskell per snapshot to simplify bisecting to find a feasible build plan
    cd ${nb_snapshot_dir}
    git clone https://github.com/habemus-papadum/IHaskell.git
)
fi

ihaskell=${nb_snapshot_dir}/bin/ihaskell
if [ ! -f "${ihaskell}" ]; then
(
  ## build
  cd ${nb_snapshot_dir}
  mkdir -p bin
  cd ${ihaskell_dir}
  stack install --resolver=${snapshot} --local-bin-path=${nb_snapshot_dir}/bin --fast
)
fi

# kernel spec
kernels_dir=${conda_dir}/share/jupyter/kernels
kernel=${project}-${snapshot}  ## todo: this could easily collide, for now it just overwrites
kernel_dir=${kernels_dir}/${kernel}

if [ ! -d "${kernel_dir}" ]; then
    ghc_dir=$(dirname $(stack path --compiler-bin))
    ghc=$(basename ${ghc_dir})
    ghc_lib=${ghc_dir}/lib/${ghc}
    (
      echo "Creating jupyter kernel for ${kernel}..."
      mkdir -p ${kernel_dir}
      cat << EOM > ${kernel_dir}/kernel.json
          {
              "display_name": "${kernel}",
              "argv": [
                "${ihaskell}",
                "kernel",
                "{connection_file}",
                "--ghclib",
                "${ghc_lib}",
                "+RTS",
                "-M3g",
                "-N2",
                "-RTS"
              ],
              "language": "Haskell"
          }
EOM

    ##copy files
      cp ${ihaskell_dir}/html/* ${kernel_dir}
    )
fi

export IHASKELL_GHC_PKG_DB=$(cd ${ihaskell_dir}; stack path --local-pkg-db)
export interposed_path=$(stack exec bash -- -c "echo \$GHC_PACKAGE_PATH"):${IHASKELL_GHC_PKG_DB}
stack exec sh << EOM
export GHC_PACKAGE_PATH=${interposed_path}
${jupyter} notebook
EOM